<div>
    <h2>Time Tracking Form</h2>
    <div x-data='[DATA]' x-init="function() {
                            placeInitialData(this);
                        }">
        <form class="event-form bg-white p-6 rounded-lg shadow-lg" action="/site/[SITE_ID]/[DATA_PAGE_ID]/sitePageDataPost" method="post" id="timeForm">
            <input type="hidden" name="_token" value="CSRF_TOKEN">
            <input type="hidden" id="team_id" name="team_id" value="[TEAM_ID]">
            <input type="hidden" id="return_json" name="return_json" value="true" />
            <input type="hidden" id="site_page_data_id" name="site_page_data_id" />

            <div class="form-group">
                <label for="entryDate">Date:</label>
                <input type="date" id="entryDate" name="entryDate" required>
            </div>

            <div class="form-group">
                <label for="startTime">Start Time:</label>
                <input type="time" id="startTime" name="startTime" required>
            </div>

            <div class="form-group">
                <label for="endTime">End Time:</label>
                <input type="time" id="endTime" name="endTime" required>
            </div>

            <div class="form-group">
                <label for="description">Description:</label>
                <textarea id="description" name="description" rows="2" placeholder="Enter work description"></textarea>
            </div>

            <button type="button" onclick="submitTimeEntry()">Add Time</button>
        </form>
    </div>
    <h3>Uninvoiced Time Entries</h3>
    <table id="timeEntriesTable">
        <thead>
            <tr>
                <th>Date</th>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Duration</th>
                <th>Description</th>
                <th>Actions</th>
                <th>Generate Invoice<br/> <button type="button" onclick="invoiceSelected()">Create Invoice</button></th>
            </tr>
        </thead>
        <tbody>
            <!-- Time entries will be appended here -->
        </tbody>
    </table>
    <script>
        // Set default date to today when page loads
        document.addEventListener('DOMContentLoaded', function () {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('entryDate').value = today;
            document.getElementById('startTime').focus();
        });

        function calculateDuration(startTime, endTime) {
            const start = new Date(`1970-01-01T${startTime}`);
            const end = new Date(`1970-01-01T${endTime}`);
            const diffMs = end - start;
            const hours = Math.floor(diffMs / 3600000);
            const minutes = Math.floor((diffMs % 3600000) / 60000);
            return `${hours}:${minutes}`;
        }


        async function submitTimeEntry() {
            const team_id = document.getElementById('team_id').value;
            const entryDate = document.getElementById('entryDate').value;
            const startTime = document.getElementById('startTime').value;
            const endTime = document.getElementById('endTime').value;
            const description = document.getElementById('description').value;
            const csrftoken = document.querySelector('[name="_token"]').value;
            const return_json = document.getElementById('return_json').value;
            const site_page_data_id = document.getElementById('site_page_data_id').value;

            const isValidTimeRange = (start, end) => {
                const startDate = new Date(`1970-01-01T${start}`);
                const endDate = new Date(`1970-01-01T${end}`);
                return startDate < endDate;
            };

            if (!entryDate || !startTime || !endTime) {
                alert('Please fill in all required fields');
                return;
            }

            if (!isValidTimeRange(startTime, endTime)) {
                alert('End time must be after start time');

                document.getElementById('startTime').focus();
                return;
            }
            try {
                const response = await fetch('/site/[SITE_ID]/[DATA_PAGE_ID]/sitePageDataPost', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrftoken
                    },
                    body: JSON.stringify({
                        date: entryDate,
                        startTime: startTime,
                        endTime: endTime,
                        description: description,
                        team_id: team_id,
                        return_json: return_json,
                        site_page_data_id: site_page_data_id
                    })
                });

                if (response.ok) {
                    const jsonResponse = await response.json();

                    const table = document.getElementById('timeEntriesTable').getElementsByTagName('tbody')[0];

                    // Clear existing rows
                    table.innerHTML = '';

                    // Parse the 'data' field to get the object of entries
                    const entries = JSON.parse(jsonResponse.data);

                    // Iterate over each entry (as an object, not an array)
                    Object.values(entries).forEach(entry => {
                        if (entry.display) { // Ensure 'display' exists to avoid errors
                            const data = JSON.parse(entry.display); // Parse the 'display' field
                            appendTimeEntry(data.date, data.startTime, data.endTime, data.description, entry.id);
                        }
                    });


                    // Clear form except date
                    document.getElementById('startTime').value = '';
                    document.getElementById('endTime').value = '';
                    document.getElementById('description').value = '';
                    document.getElementById('site_page_data_id').value = '';

                } else {
                    alert('Error submitting data');
                }
            } catch (error) {
                console.error('Error:', error);
            }


        }

        function appendTimeEntry(date, startTime, endTime, description, id) {
            const table = document.getElementById('timeEntriesTable').getElementsByTagName('tbody')[0];
            const newRow = table.insertRow();

            const cellDate = newRow.insertCell(0);
            const cellStartTime = newRow.insertCell(1);
            const cellEndTime = newRow.insertCell(2);
            const cellDuration = newRow.insertCell(3);
            const cellDescription = newRow.insertCell(4);
            const cellActions = newRow.insertCell(5);
            const cellCheckbox = newRow.insertCell(6); // Add a cell for the checkbox


            cellDate.innerHTML = `<input type="date" value="${date}" onchange="updateTimeEntry(this)">`;
            cellStartTime.innerHTML = `<input type="time" value="${startTime}" onchange="updateTimeEntry(this)">`;
            cellEndTime.innerHTML = `<input type="time" value="${endTime}" onchange="updateTimeEntry(this)">`;
            cellDuration.textContent = calculateDuration(startTime, endTime);
            cellDescription.innerHTML = `<input type="text" value="${description || ''}" onchange="updateTimeEntry(this)">`;
            cellActions.innerHTML = `
                <button onclick="deleteRow(${id},this)">Delete</button>
                <button onclick="updateRow(${id},this)">Update</button>
            `;
            // Add a checkbox to the last cell
            cellCheckbox.innerHTML = `<input type="checkbox" name="selectForInvoice" value="${id}">`;

        }

        async function deleteRow(id, button) {
            if (confirm('Are you sure you want to delete this time entry?')) {
                const row = button.parentNode.parentNode;

                const csrftoken = document.querySelector('[name="_token"]').value;

                try {
                    const response = await fetch(`/site-page-data/[DATA_PAGE_ID]/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': csrftoken
                        }
                    });

                    if (response.ok) {
                        // If the API call is successful, remove the row from the DOM
                        row.parentNode.removeChild(row);
                    } else {
                        alert('Error deleting entry. Please try again.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An unexpected error occurred. Please check your connection and try again.');
                }
            }
        }


        async function updateRow(id, button) {
            const csrftoken = document.querySelector('[name="_token"]').value;
            const row = button.parentNode.parentNode;
            const startTime = row.cells[1].getElementsByTagName('input')[0].value;
            const endTime = row.cells[2].getElementsByTagName('input')[0].value;
            const team_id = document.getElementById('team_id').value;

            if (startTime && endTime && startTime < endTime) {
                try {

                    const entryDate = row.cells[0].getElementsByTagName('input')[0].value;
                    const description = row.cells[4].getElementsByTagName('input')[0].value;
                    const csrftoken = document.querySelector('[name="_token"]').value;
                    const site_page_data_id = document.getElementById('site_page_data_id').value;


                    const return_json = document.getElementById('return_json').value;

                    // Prepare data for the API call
                    const data = {
                        id: id,
                        date: entryDate,
                        startTime: startTime,
                        endTime: endTime,
                        description: description,
                        team_id: team_id,
                        return_json: return_json,
                        site_page_data_id: site_page_data_id

                    };

                    const response = await fetch('/site/[SITE_ID]/[DATA_PAGE_ID]/sitePageDataPost', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': csrftoken
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        const jsonResponse = await response.json();
                        // Update the duration cell if the API call is successful
                        row.cells[3].textContent = calculateDuration(startTime, endTime);
                        console.log('Update successful:', jsonResponse);
                    } else {
                        alert('Error updating the data on the server.');
                        console.error('Server error:', response.statusText);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while trying to update the data.');
                }
            } else {
                alert('Please enter valid times. Start time must be before end time.');
            }
        }


        function updateTimeEntry(input) {
            if (input.value === '') {
                alert('Field cannot be empty.');
                input.value = input.defaultValue;
            } else {
                input.defaultValue = input.value;

            }
        }


        function placeInitialData(data) {
            // Iterate over all keys in the `data` object
            Object.keys(data).forEach(key => {
                // Check if the current item is an object and has a `display` property
                if (typeof data[key] === 'object' && data[key] !== null && 'display' in data[key]) {
                    try {
                        // Parse the `display` JSON string into an object
                        const parsedDisplay = JSON.parse(data[key].display);

                        appendTimeEntry(parsedDisplay.date, parsedDisplay.startTime, parsedDisplay.endTime, parsedDisplay.description, data[key].id);
                        // Example: You can add further logic here to handle the `parsedDisplay` data
                    } catch (error) {
                        console.error(`Error parsing display for item ${key}:`, error);
                    }
                }
            });
        }

function invoiceSelected() {
    // Get the table body and rows
    const table = document.getElementById('timeEntriesTable').getElementsByTagName('tbody')[0];
    const rows = table.getElementsByTagName('tr');
    
    // Array to hold selected records
    const selectedRecords = [];
    let totalDuration = 0; // Total duration in minutes

    // Iterate over rows to find selected checkboxes
    for (let i = 0; i < rows.length; i++) {
        const checkbox = rows[i].querySelector('input[type="checkbox"][name="selectForInvoice"]');
        if (checkbox && checkbox.checked) {
            // Extract the row data
            const cells = rows[i].getElementsByTagName('td');
            const date = cells[0].querySelector('input').value;
            const startTime = cells[1].querySelector('input').value;
            const endTime = cells[2].querySelector('input').value;
            const description = cells[4].querySelector('input').value;

            // Try to get duration either from input or cell text
            const durationElement = cells[3];
            const duration = durationElement.querySelector('input') ? 
                durationElement.querySelector('input').value.trim() : 
                durationElement.textContent.trim();

            console.log(`Row ${i} - Duration value:`, duration);

            if (duration && duration.includes(':')) {
                const [hours, minutes] = duration.split(':').map(Number);
                console.log(`Row ${i} - Parsed hours:`, hours, 'minutes:', minutes);
                
                if (!isNaN(hours) && !isNaN(minutes)) {
                    const rowDuration = (hours * 60) + minutes;
                    totalDuration += rowDuration;
                    console.log(`Row ${i} - Added duration:`, rowDuration, 'New total:', totalDuration);
                } else {
                    console.warn(`Row ${i} - Invalid duration format:`, duration);
                }
            } else {
                console.warn(`Row ${i} - Duration not in HH:MM format:`, duration);
            }

            selectedRecords.push({ date, startTime, endTime, duration, description });
        }
    }

    // Create the table element for the invoice
    const invoiceTable = document.createElement('table');
    invoiceTable.border = '1';
    invoiceTable.innerHTML = `
        <thead>
            <tr>
                <th>Date</th>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Duration</th>
                <th>Description</th>
            </tr>
        </thead>
    `;

    const invoiceBody = document.createElement('tbody');

    // Populate the invoice table with selected records
    selectedRecords.forEach(record => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${record.date}</td>
            <td>${record.startTime}</td>
            <td>${record.endTime}</td>
            <td>${record.duration}</td>
            <td>${record.description}</td>
        `;
        invoiceBody.appendChild(row);
    });

    // Add a footer row to display the total duration
    const footerRow = document.createElement('tr');
const totalHours = (totalDuration / 60).toFixed(2); // Converts to hours with 2 decimal places
footerRow.innerHTML = `
    <td colspan="3"><strong>Total Duration</strong></td>
    <td colspan="2">${totalHours} hours</td>
`;

   
    invoiceBody.appendChild(footerRow);

    invoiceTable.appendChild(invoiceBody);

    // Append the invoice table to the body before the end
    document.body.appendChild(invoiceTable);



// Create a new window and print the table
    const printWindow = window.open('', '_blank', 'width=800,height=600');
    printWindow.document.write(`
        <html>
            <head>
                <title>Invoice Table</title>
                <style>
                    table { border-collapse: collapse; width: 100%; }
                    th, td { border: 1px solid black; padding: 8px; text-align: left; }
                    th { background-color: #f2f2f2; }
                </style>
            </head>
            <body>
                ${invoiceTable.outerHTML}
            </body>
        </html>
    `);
    printWindow.document.close();
    printWindow.print();
}


    </script>

</div>
